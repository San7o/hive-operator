/*
                    GNU GENERAL PUBLIC LICENSE
                       Version 2, June 1991

 Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.
*/

// SPDX-License-Identifier: GPL-2.0-only

package main

import (
	"context"
	"crypto/tls"
	"flag"
	"os"
	"strings"

	// Import all Kubernetes client auth plugins (e.g. Azure, GCP, OIDC, etc.)
	// to ensure that exec-entrypoint and run can make use of them.
	_ "k8s.io/client-go/plugin/pkg/client/auth"

	"k8s.io/apimachinery/pkg/runtime"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	clientgoscheme "k8s.io/client-go/kubernetes/scheme"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/healthz"
	"sigs.k8s.io/controller-runtime/pkg/log/zap"
	"sigs.k8s.io/controller-runtime/pkg/metrics/filters"
	metricsserver "sigs.k8s.io/controller-runtime/pkg/metrics/server"
	"sigs.k8s.io/controller-runtime/pkg/webhook"

	kivev1alpha1 "github.com/San7o/kivebpf/api/v1alpha1"
	"github.com/San7o/kivebpf/internal/controller"
	kive "github.com/San7o/kivebpf/internal/controller"
	kivecontainer "github.com/San7o/kivebpf/internal/controller/container"
	kivebpf "github.com/San7o/kivebpf/internal/controller/ebpf"
	// +kubebuilder:scaffold:imports
)

var (
	scheme   = runtime.NewScheme()
	setupLog = ctrl.Log.WithName("setup")
)

func init() {
	utilruntime.Must(clientgoscheme.AddToScheme(scheme))

	utilruntime.Must(kivev1alpha1.AddToScheme(scheme))
	// +kubebuilder:scaffold:scheme
}

func main() {
	var metricsAddr string
	var kivePolicyProbeAddr string
	var kiveDataProbeAddr string
	var kivePodProbeAddr string
	var secureMetrics bool
	var enableHTTP2 bool
	var tlsOpts []func(*tls.Config)
	flag.StringVar(&metricsAddr, "metrics-bind-address", "0", "The address the metrics endpoint binds to. "+
		"Use :8443 for HTTPS or :8080 for HTTP, or leave as 0 to disable the metrics service.")
	flag.StringVar(&kivePolicyProbeAddr, "kive-policy-health-probe-bind-address", ":8081", "The address the kive policy endpoint binds to.")
	flag.StringVar(&kiveDataProbeAddr, "kive-data-health-probe-bind-address", ":8082", "The address the probe endpoint binds to.")
	flag.StringVar(&kivePodProbeAddr, "kive-pod-health-probe-bind-address", ":8082", "The address the probe endpoint binds to.")
	flag.BoolVar(&secureMetrics, "metrics-secure", true,
		"If set, the metrics endpoint is served securely via HTTPS. Use --metrics-secure=false to use HTTP instead.")
	flag.BoolVar(&enableHTTP2, "enable-http2", false,
		"If set, HTTP/2 will be enabled for the metrics and webhook servers")
	opts := zap.Options{
		Development: true,
	}
	opts.BindFlags(flag.CommandLine)
	flag.Parse()

	ctrl.SetLogger(zap.New(zap.UseFlagOptions(&opts)))

	kernelIDBytes, err := os.ReadFile(kive.KernelIDPath)
	if err != nil {
		setupLog.Error(err, "Cannot read kerrnel boot ID at"+kive.KernelIDPath)
		os.Exit(1)
	}
	kive.KernelID = string(kernelIDBytes)
	kive.KernelID = strings.TrimSpace(kive.KernelID)

	// if the enable-http2 flag is false (the default), http/2 should be disabled
	// due to its vulnerabilities. More specifically, disabling http/2 will
	// prevent from being vulnerablpe to the HTTP/2 Stream Cancellation and
	// Rapid Reset CVEs. For more information see:
	// - https://github.com/advisories/GHSA-qppj-fm5r-hxr3
	// - https://github.com/advisories/GHSA-4374-p667-p6c8
	disableHTTP2 := func(c *tls.Config) {
		setupLog.Info("disabling http/2")
		c.NextProtos = []string{"http/1.1"}
	}

	if !enableHTTP2 {
		tlsOpts = append(tlsOpts, disableHTTP2)
	}

	webhookServer := webhook.NewServer(webhook.Options{
		TLSOpts: tlsOpts,
	})

	// Metrics endpoint is enabled in 'config/default/kustomization.yaml'. The Metrics options configure the server.
	// More info:
	// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.19.0/pkg/metrics/server
	// - https://book.kubebuilder.io/reference/metrics.html
	metricsServerOptions := metricsserver.Options{
		BindAddress:   metricsAddr,
		SecureServing: secureMetrics,
		// Since certificates are (currently) not provided, self-signed
		// certificates will be generated by default. This option is not
		// recommended for production environments as self-signed
		// certificates do not offer the same level of trust and security
		// as certificates issued by a trusted Certificate Authority
		// (CA). The primary risk is potentially allowing unauthorized
		// access to sensitive metrics data.
		//
		// TLS is currently not suported so by default the the argument
		// "metrics-bind-address" is set to 0 to disable metrics
		// completely, until TLS is fully supported.
		TLSOpts: tlsOpts,
	}

	if secureMetrics {
		// FilterProvider is used to protect the metrics endpoint with authn/authz.
		// These configurations ensure that only authorized users and service accounts
		// can access the metrics endpoint. The RBAC are configured in 'config/rbac/kustomization.yaml'. More info:
		// https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.19.0/pkg/metrics/filters#WithAuthenticationAndAuthorization
		metricsServerOptions.FilterProvider = filters.WithAuthenticationAndAuthorization
	}

	// KiveData manager
	kiveDataMgr, err := ctrl.NewManager(ctrl.GetConfigOrDie(), ctrl.Options{
		Scheme:                 scheme,
		Metrics:                metricsServerOptions,
		WebhookServer:          webhookServer,
		HealthProbeBindAddress: kiveDataProbeAddr,
		LeaderElection:         true,
		LeaderElectionID:       kive.KernelID,
	})
	if err != nil {
		setupLog.Error(err, "unable to start kiveData manager")
		os.Exit(1)
	}

	// Kive manager
	kivePolicyMgr, err := ctrl.NewManager(ctrl.GetConfigOrDie(), ctrl.Options{
		Scheme:                 scheme,
		Metrics:                metricsServerOptions,
		WebhookServer:          webhookServer,
		HealthProbeBindAddress: kivePolicyProbeAddr,
	})
	if err != nil {
		setupLog.Error(err, "unable to start kive manager")
		os.Exit(1)
	}

	// Pod manager
	kivePodMgr, err := ctrl.NewManager(ctrl.GetConfigOrDie(), ctrl.Options{
		Scheme:                 scheme,
		Metrics:                metricsServerOptions,
		WebhookServer:          webhookServer,
		HealthProbeBindAddress: kivePodProbeAddr,
		LeaderElection:         true,
		LeaderElectionID:       "kive",
	})
	if err != nil {
		setupLog.Error(err, "unable to start kivePod manager")
		os.Exit(1)
	}

	if err = (&controller.KivePolicyReconciler{
		Client:         kivePolicyMgr.GetClient(),
		UncachedClient: kivePolicyMgr.GetAPIReader(),
		Scheme:         kivePolicyMgr.GetScheme(),
	}).SetupWithManager(kivePolicyMgr); err != nil {
		setupLog.Error(err, "unable to create KivePolicy controller", "controller", "KivePolicy")
		os.Exit(1)
	}

	if err = (&controller.KiveDataReconciler{
		Client:         kiveDataMgr.GetClient(),
		UncachedClient: kiveDataMgr.GetAPIReader(),
		Scheme:         kiveDataMgr.GetScheme(),
	}).SetupWithManager(kiveDataMgr); err != nil {
		setupLog.Error(err, "unable to create KiveData controller", "controller", "KiveData")
		os.Exit(1)
	}

	if err = (&controller.KivePodReconciler{
		Client: kivePodMgr.GetClient(),
	}).SetupWithManager(kivePodMgr); err != nil {
		setupLog.Error(err, "unable to create KivePod controller", "controller", "KivePod")
		os.Exit(1)
	}

	// +kubebuilder:scaffold:builder

	if err := kivePolicyMgr.AddHealthzCheck("healthz", healthz.Ping); err != nil {
		setupLog.Error(err, "unable to set up health check")
		os.Exit(1)
	}
	if err := kivePolicyMgr.AddReadyzCheck("readyz", healthz.Ping); err != nil {
		setupLog.Error(err, "unable to set up ready check")
		os.Exit(1)
	}

	if err := kiveDataMgr.AddHealthzCheck("healthz", healthz.Ping); err != nil {
		setupLog.Error(err, "unable to set up health check")
		os.Exit(1)
	}
	if err := kiveDataMgr.AddReadyzCheck("readyz", healthz.Ping); err != nil {
		setupLog.Error(err, "unable to set up ready check")
		os.Exit(1)
	}

	if err := kivePodMgr.AddHealthzCheck("healthz", healthz.Ping); err != nil {
		setupLog.Error(err, "unable to set up health check")
		os.Exit(1)
	}
	if err := kivePodMgr.AddReadyzCheck("readyz", healthz.Ping); err != nil {
		setupLog.Error(err, "unable to set up ready check")
		os.Exit(1)
	}

	setupLog.Info("starting kive managers")

	go func() {
		if err := kivePolicyMgr.Start(context.Background()); err != nil {
			setupLog.Error(err, "Error running KivePolicy manager")
			os.Exit(1)
		}
	}()

	go func() {
		if err := kivePodMgr.Start(context.Background()); err != nil {
			setupLog.Error(err, "Error running KivePod manager")
			os.Exit(1)
		}
	}()

	kiveDataMgrCtx := ctrl.SetupSignalHandler()

	// Unload the eBPF program when leadership is lost
	go func() {
		<-kiveDataMgrCtx.Done() // Wait until leadership is lost
		setupLog.Info("KiveData manager lost leadership")

		kivebpf.UnloadEbpf(context.Background())
	}()

	if err := kiveDataMgr.Start(kiveDataMgrCtx); err != nil {
		setupLog.Error(err, "Error running KiveData manager")
		os.Exit(1)
	}

	// Cleanup
	if err := kivecontainer.CloseConnections(); err != nil {
		setupLog.Error(err, "Error closing connections")
	}
	if err := kivebpf.UnloadEbpf(context.Background()); err != nil {
		setupLog.Error(err, "Error unloading eBPF programs")
	}
	return
}
