#+startup: content indent

* Project Status

This document contains future work needed for the project.


** Part 1 - MVP [4/4][100%]                                            :mvp:
*** DONE Udate the design document
- State "DONE"       from "TODO"       [2025-03-17 Mon 14:48]
The current design document has been reviewed and some changes
are required. In particular, the changes are the following:
- instead of having two operator, the application will have
  only one operator and two controllers
- specify how custom resources are defined. Note that in the
  discover's resource, the use may not specify a pod name.
- the eBPF should not log to =trace_pipe=, instead It should
  log to a ringbuffer or perfbuffer.
- modify the example deployment image to reflect the changes.
- fix minor errors and improve grammar
*** DONE Refactor README
- State "DONE"       from "TODO"       [2025-03-17 Mon 14:48]
Move the writeup section to a dedicated file. Move the building
and testing section to a dedicated file. Mention the design
document.
*** DONE Move shell scripts into makefile
- State "DONE"       from "TODO"       [2025-03-17 Mon 14:48]
Simplify the shell script by moving their execution to the make
file.
*** DONE Change the license to GPL-2.0
- State "DONE"       from "TODO"       [2025-03-18 Tue 15:51]
Change the license document in all files.

*** Discover [6/6][100%]                                         :discover:
**** DONE Refactor =kive= to =kive policy=
- State "DONE"       from "TODO"       [2025-04-26 Sat 17:51]
Refactor the CRD from =kive= to =kive policy= in the
file name and resources.
**** DONE Setup Custom Resource Definition
- State "DONE"       from "TODO"       [2025-03-18 Tue 14:48]
Finalize the CRD managed by the discover controller. Each
resource represents one or more traced file, and environment
information such as pod name, namespace, label. Additionally,
an option to create the file should be provided, if the file
does not exist.

The API would look something like this:
#+begin_src yaml
kind: KivePolicy
metadata:
  name: kive-sample-policy
spec:
  monitors:
    - path: /run/secrets/token
      create: true                    # also creates the file
      match:
        pod: my-pod
        namespace: my-namespace
        container: my-ctr
#+end_src

This should be defined in the =api/v2alpha1/kive_types.go=
and fetched in the discover controller.
**** DONE Filter pods
- State "DONE"       from "TODO"       [2025-03-19 Wed 14:19]
Filter the pods to check based on the custom resource.
This needs to be done for each custom resource, so the
time complexity is =O(n*m*c)= where =n= is the number of
custom resources, and =m= is the number of pods and c is the
number of containers in the node.
**** DONE Filters with multiple entries
- State "DONE"       from "TODO"       [2025-03-19 Wed 14:52]
Allow multiple entries in the match filters.
**** DONE Reconcile: Update KiveData CRD when KivePolicy is modified
- State "DONE"       from "TODO"       [2025-04-25 Fri 13:48]
Update the Loader's CRD accordingly. When a KivePolicy is added,
the corresponding KiveData resources are generated. When a
KivePolicy is deleted, it should delete Its corresponding
KiveDatas. Similarly for updates. To handle deletions and
updates, we delegate to the reconciliation of KiveData, which
will check if each KiveData referst to a KivePolicy.2

This taks depends on the Loader's CRD to be defined.
**** DONE Move housekeeping to main
- State "DONE"       from "TODO"       [2025-03-18 Tue 14:48]
Move the code responsbile to create the connection with the
container runtime and to fetch the kernel id in the main.
UPDATE: The runtime connection is lazily done during the logic
if not done previously
*** Loader [12/12][100%]                                           :loader:
**** DONE Create a new controller using operator-sdk
- State "DONE"       from "TODO"       [2025-03-24 Mon 11:32]
https://sdk.operatorframework.io/docs/cli/operator-sdk_create_api/
**** DONE Leader Election
- State "DONE"       from "TODO"       [2025-04-08 Tue 11:14]
The loader controller should be run only once for each
running kernel. This is achieved through elections.
This code implements a simple loader election:
https://github.com/kubernetes-retired/contrib/pull/353/files

I have discovered from this post
https://carlosbecker.com/posts/k8s-leader-election/ that there is a
leader election package in kubernetes:
https://pkg.go.dev/k8s.io/client-go/tools/leaderelection however,
there is the following disclaimer: this is an alpha API. This library
will likely change significantly or even be removed entirely in
subsequent releases. Depend on this API at your own risk.

I could try to reimplement this myself.
In theory, to make leader elections work a system needs a
shared resource and a locking mechanism. The leader has the
lock and he can release It so that all the candidates can
compete again for the log. The leader prvides an hearthbeat
so that when the beat stop, It is considered dead and the
lock is leased.

I may use the alpha implementation in the first release of
Kive.
Check out other solutions such as
https://github.com/bpfman/bpfman

**** DONE Define CRD
- State "DONE"       from "TODO"       [2025-04-08 Tue 10:40]
Define the custom resource definition for the loader, which
contains the inode + device id pair, the pod name, the path
name and the kernel-id. Refer to the DESIGN document for more
details. It also should contain a status (added / removed)
(this needs to be researched).
**** DONE Load the eBPF program
- State "DONE"       from "TODO"       [2025-04-08 Tue 18:29]
The leader should load the eBPF program. This should be tested
in different cluster configurations (one loader, two loaders,
kind cluster, vm cluster...)
**** DONE Reconcile: Update the eBPF program
- State "DONE"       from "TODO"       [2025-04-26 Sat 17:06]
When a change happens to the custom resource, the eBPF program's
map should be updated accordingly, with only the entries that
match the kernel-id of the loader's machine.
**** DONE Watch: Update KiveData when pods are modified
- State "DONE"       from "TODO"       [2025-04-27 Sun 12:49]
Create / Remove / Update the loader's CRD on pod events or
change the status of the resource if possible.

This task depends on the Loader's CRD to be defined.
**** DONE Handle Rescheduling
- State "DONE"       from "TODO"       [2025-04-26 Sat 14:53]
When the operator gets rescheduled, the leader Loader
controller should reload the eBPF program.

Note: This is implicitly done because each replica contains
information about if the program is loaded or not. If one
replica becomes the leader, it won't have loaded the program
so It will do it at the first opportunity. The problem arises
if a replica gives up Its leadership without terminating, this
case should be handled by unloading the program and unsetting
the variable.
**** DONE Log to stdout
- State "DONE"       from "TODO"       [2025-04-08 Tue 18:35]
The leader should read the eBPF's output and log to standard
output.
**** DONE Match labels when comparing KiveData and KivePolicy during reconciliation
- State "DONE"       from "TODO"       [2025-04-29 Tue 11:46]
The KiveData resource should have the same =match= section
as KivePolicy.
**** DONE Rich log information
- State "DONE"       from "TODO"       [2025-04-29 Tue 11:46]
Add additional logging information such as pod name, label,
namespace, and more to the logged information after an eBPF
output.
**** DONE Resend reconcile request when container is not ready
- State "DONE"       from "TODO"       [2025-04-28 Mon 18:10]
During the Kive Policy reconciliation, if a container is not
ready it is skipped and the KiveData won't be created. This can
be solved by sending another reconciliation request if the status
is not ready. It will keep looping until the container will be
ready.
**** DONE Fix error "non-exact field matches are not supported by the cache"
- State "DONE"       from "TODO"       [2025-04-29 Tue 15:30]
**** eBPF [4/4][100%]                                               :ebpf:
***** CANCEL Map of inode number + device id
- State "CANCEL"     from "TODO"       [2025-03-21 Fri 18:13]
The map should be an array of pairs =(inode_number, dev_id)=.

This is harder than expected, apparently the inode's kernel
id is not the same as the user space's stat.st_dev for some
filesystems. Please read the following for more information:
https://www.sabi.co.uk/blog/21-two.html?210804#210804
The eBPF program cannot call the stat syscall nor It cannot
reacreate It because (1) a lot of conditional compilation is
used and (2) the functions called depend on the underlying
filesystem which we cannot call from the eBPF program.
***** DONE Log to ring buffer
- State "DONE"       from "TODO"       [2025-03-24 Mon 10:44]
Instead of writing logs to the system, they should be put
to a ring buffer for the logger.
Read https://nakryiko.com/posts/bpf-ringbuf/
***** DONE Log additional data
- State "DONE"       from "TODO"       [2025-03-21 Fri 18:13]
Research what useful information should be logged (such as
PID, GID, rights wrx, ...) and log it.
***** DONE Modify map with array on inodes
- State "DONE"       from "TODO"       [2025-03-24 Mon 09:12]
The map should contain multiple inodes and should Iterate
over them.
** Part 2 - Testing and Deployment [3/5][60%]                      :testing:
*** DONE Alternative test cluster
- State "DONE"       from "DONE"       [2025-07-29 Tue 17:23]
The local setup currently features only the creation of a cluster
with Kind. The limitation is that It all runs on the same kernel
so It will never happen that multiple eBPF programs are loaded
in the cluster. To test those cases, an alternative test cluster
should be supported using VMs. Possible solutions include K3s,
Minikube.
*** DONE E2E tests
- State "DONE"       from "TODO"       [2025-07-29 Tue 17:23]
Write end-to-end automated tests for the operator.
*** DONE Official Docker Registry
- State "DONE"       from "TODO"       [2025-05-12 Mon 23:47]
Create an official container image on the docker registry.
*** TODO Helm package
Create an official helm chart for the application.
*** TODO Integrate with Koney
Integrate Kive with Koney
** Optional - Refinement [3/6][50%]                             :refinement:
*** DONE Log to an external service
Instead of logging to stdout, the operator may log to a socket
provided by the user or to a standard socket.

Alternatively, the operator could notify an external service when
there is something to log with the "GetUrl" action. The user API
could look like the following in an KivePolicy:
#+begin_src yaml
  actions:
    - action: Post
      argUrl: http://ebpf.io
#+end_src

*** DONE Allow multiple values in match fields
- State "DONE"       from "TODO"       [2025-08-02 Sat 19:11]
When specifying a Kive Policy, the user should be able to
specify multiple values for each match field (pod name and
namespaces). Kubernetes does not support this natively so multiple
request for each combination of fields should be executed, greately
increasing the time complexity of the query.
*** TODO Make the output compliant to OpenTelemetry
Learn more about OpenTelemetry and how to interface the operator
with OpenTelemetry.
*** DONE Implement abstraction over container runtime
Different implementations are needed for each container runtime.
It would be wise to have a common interface between all the
container runtimes to ease the process of adding support for
new runtimes.
*** TODO Measure Performance
Measure the performance of the application with respect to
how many resources are used (RAM, CPU) and network traffic
load.
A possible tool may be cAdvisor.
*** TODO CI/CD Tests
Setup CI/CD automated tests on multiple architectures and kernel
versions, as well as different kubernetes versions and cluster
runtimes.
Inspiration should be taken from Falco's and Tetragon's CI/CD.
